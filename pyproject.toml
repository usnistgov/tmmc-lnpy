[build-system]
build-backend = "setuptools.build_meta"
requires = ["setuptools>=61.2", "setuptools_scm[toml]>=8.0"]

[project]
name = "tmmc-lnpy"
description = "Analysis of lnPi results from TMMC simulation"
keywords = ["tmmc-lnpy"]
license = { text = "NIST-PD" }
authors = [{ name = "William P. Krekelberg", email = "wpk@nist.gov" }]
requires-python = ">=3.8"
classifiers = [
    "Development Status :: 2 - Pre-Alpha",
    "Intended Audience :: Science/Research",
    "License :: Public Domain",
    "Operating System :: OS Independent",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering",
]
dynamic = ["readme", "version"]
dependencies = [
    "bottleneck",
    "importlib_resources",
    "joblib",
    "lazy_loader",
    "module-utilities >= 0.9.0",
    "numpy",
    "scikit-image >= 0.21",
    "scipy",
    "tqdm",
    "xarray",
] # additional packages

[project.optional-dependencies]
dev = [
    "tmmc-lnpy[nbval]",
    "tmmc-lnpy[test]",
    "tmmc-lnpy[typing-extras]",
    "tmmc-lnpy[dev-extras]",
]
dev-complete = ["tmmc-lnpy[dev]", "tmmc-lnpy[tools]", "tmmc-lnpy[nox]"]
dev-extras = ["ipykernel", "ipython", "pytest-accept", "tmmc-lnpy[viz]"]
docs = [
    "autodocsumm",
    "ghp-import",
    "ipython",
    "myst-nb",
    "pyenchant",
    "sphinx >= 5.3.0",
    "sphinx-autobuild",
    "sphinx-book-theme",
    "sphinx-copybutton",
    "sphinxcontrib-spelling",
    "tmmc-lnpy[viz]",
]
nbval = ["nbval"]
nox = ["nox", "ruamel.yaml"]
test = ["pytest", "pytest-cov", "pytest-sugar", "pytest-xdist"]
tools = ["nbqa", "pre-commit", "pyright", "scriv"]
typing = ["pytest", "tmmc-lnpy[typing-extras]"]
typing-extras = [
    "mypy >= 1.6.1",
    "pandas-stubs",
    "pytype; python_version < '3.11'",
    "types-tqdm",
]
viz = ["ipywidgets", "matplotlib"]

[project.urls]
Documentation = "https://pages.nist.gov/tmmc-lnpy/"
Homepage = "https://github.com/usnistgov/tmmc-lnpy"

[tool.setuptools]
zip-safe = true # if using mypy, must be False
include-package-data = true
license-files = ["LICENSE"]

[tool.setuptools.packages.find]
namespaces = true
where = ["src"]

## include = []
## exclude = []
[tool.setuptools.dynamic]
readme = { file = [
    "README.md",
    "CHANGELOG.md",
    "LICENSE"
], content-type = "text/markdown" }

[tool.setuptools_scm]
fallback_version = "999"

[tool.ruff]
fix = true
line-length = 88
target-version = "py38"
select = [
    # pyflakes
    "F",
    # pycodestyle
    "E",
    "W",
    # isort
    "I",
    # pyupgrade
    "UP",
    # pydocstyle
    "D",
    # # flake8-2020
    "YTT",
    # # flake8-bugbear
    # "B",
    # flake8-quotes
    "Q",
    # # pylint
    # "PLE", "PLR", "PLW",
    # # misc lints
    "PIE",
    # # tidy imports
    "TID",
    # # implicit string concatenation
    # "ISC",
    # # type-checking imports
    "TCH",
]
# Allow autofix for all enabled rules (when `--fix`) is provided.
# fixable = ["A", "B", "C", "D", "E", "F", "..."]
unfixable = []
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    "tests/",
    "src/lnpy/tests",
]
ignore = [
    # # whitespace before ':' - doesn't work well with black
    # "E203",
    # module level import not at top of file
    "E402",
    # line too long - let black worry about that
    "E501",
    # do not assign a lambda expression, use a def
    "E731",
    # # line break before binary operator
    # "W503",
    # allow black line after docstring
    "D202",
    "D105",
    "D205",
    # this leads to errors with placing titles in module
    # docstrings
    "D400",
    "D401",
    "D415",
    "D102",
    "D103",
    # these are useful, but too many errors
    # due to use of docfiller
    "D417",
    "D107",
    "D203",
    "D212",
    # Allow relative imports
    "TID252",
]
per-file-ignores = {  }
# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.isort]
known-first-party = ["lnpy"]

[tool.ruff.mccabe]
# Unlike Flake8, default to a complexity level of 10.
max-complexity = 10

[tool.isort]
profile = "black"
skip_gitignore = true
known_first_party = ["lnpy"]

[tool.flake8]
docstring-convention = "numpy"
ignore = [
    # # whitespace before ':' - doesn't work well with black
    "E203",
    # module level import not at top of file
    "E402",
    # line too long - let black worry about that
    "E501",
    # do not assign a lambda expression, use a def
    "E731",
    # # line break before binary operator
    "W503",
    # allow black line after docstring
    "D202",
    "D105",
    "D205",
    # this leads to errors with placing titles in module
    # docstrings
    "D400",
    "D401",
    "D415",
    "D102",
    "D103",
    # these are useful, but too many errors
    # due to use of docfiller
    "D417",
    "D107",
    "D203",
    "D212",
]

[tool.nbqa.addopts]
ruff = ["--fix", "--extend-ignore=D100,B018"]

[tool.pytest.ini_options]
addopts = "--doctest-modules --doctest-glob='*.md' --pyargs"
testpaths = ["tests", "lnpy", "lnPi", "README.md"]

[tool.coverage.report]
exclude_also = ["if TYPE_CHECKING:", "@overload"]
omit = ["*/vendored/*"]
include = ["src/*"]

[tool.mypy]
files = ["src", "tests"]
show_error_codes = true
warn_unused_ignores = true
warn_return_any = true
warn_unused_configs = true
exclude = [".eggs", ".tox", "doc", "docs", ".nox", "envs"]
check_untyped_defs = true
strict = true
untyped_calls_exclude = ["skimage"]

[[tool.mypy.overrides]]
ignore_missing_imports = true
module = [
    "joblib.*",
    "skimage.*",
    "bottleneck.*",
    "scipy.ndimage.*",
    "scipy.spatial.*",
    "scipy.optimize.*",
    "lnPi.*",
    "IPython.*",
    "matplotlib.*",
]

[[tool.mypy.overrides]]
ignore_errors = true
module = []

[tool.pyright]
include = ["src", "tests"]
exclude = ["**/__pycache__", ".tox/**", ".nox/**", "envs/**", "**/.mypy_cache"]
# strict = ["src/lnpy"]  # TODO: enable strict mode for src
pythonVersion = "3.11"
typeCheckingMode = "basic"
# enable subset of "strict"
reportDuplicateImport = true
reportInvalidStubStatement = true
reportOverlappingOverload = true
reportPropertyTypeMismatch = true
reportUntypedClassDecorator = true
reportUntypedFunctionDecorator = true
reportUntypedNamedTuple = true
reportUnusedImport = true
# disable subset of "basic"
reportGeneralTypeIssues = false
reportMissingModuleSource = false
reportOptionalCall = false
reportOptionalIterable = false
reportOptionalMemberAccess = false
reportOptionalOperand = false
reportOptionalSubscript = false
reportPrivateImportUsage = false
reportUnboundVariable = false

[tool.pyproject2conda]
user_config = "config/userconfig.toml"
template_python = "requirements/py{py}-{env}"
template = "requirements/{env}"
# defaults
python = ["3.11"]
channels = ["conda-forge"]
style = ["yaml", "requirements"]
default_envs = ["test", "typing", "docs", "dev", "dev-complete"]

[tool.pyproject2conda.dependencies]
pytest-accept = { pip = true }
scriv = { pip = true }
matplotlib = { skip = true, packages = "matplotlib-base" }

[tool.pyproject2conda.envs.test-extras]
extras = ["test"]
base = false

[tool.pyproject2conda.envs.dev-base]
extras = ["dev"]

[tool.pyproject2conda.envs.build]
extras = "build-system.requires"
reqs = ["build"]
base = false
style = "requirements"

# make sure pip available to all conda environments
# that install the package
[tool.pyproject2conda.envs.test-notebook]
extras = ["test", "nbval", "viz"]

## grayskull still messes some things up, but use scripts/recipe-append.sh for this
[[tool.pyproject2conda.overrides]]
envs = ["test", "dev", "dev-complete", "dev-base", "docs"]
deps = ["pip"]

[[tool.pyproject2conda.overrides]]
envs = ["test", "typing", "test-extras"]
python = ["3.8", "3.9", "3.10", "3.11", "3.12"]

# Project specific
[tool.aliases]
test = "pytest"

[tool.scriv]
format = "md"
md_header_level = "2"
new_fragment_template = "file: changelog.d/templates/new_fragment.md.j2"

[tool.commitizen]
use_shortcuts = true

[tool.cruft]

[tool.pytype]
inputs = ["src", "tests"]
